company: Yaskawa Europe GmbH
author: Rioual
comment: IO data for the MceStartStop function
changelog:
  - version: 1.0.0
    date: 2024-12-12
    author: Rioual
    added:
      - Input `bHold`
      - Output `bHoldActive`
    changed:
      - Rename `bSystemReady` to `bServoOn`
      - Output `bServoOn` is now TRUE at state 50
      - Rename `bStopIndicator` to `bSystemStopped`
    removed:
      - Output `bStartIndicator`
      - blinking behavior on `bSystemStopped`
  - version: 0.2.0
    date: 2022-02-23
    author: deGroot
    changed:
      - number the state machines
  - version: 0.1.0
    date: 2022-02-11
    author: Rioual
    added:
      - first version
#   changed:
#   fixed:
#   deprecated:
#   removed:
#   security:
var:
  - name: bExternalConditionsOk
    description: |
      *Used as input*

      Chain all required *external* conditions for executing motion commands to
      this input. Typical conditions are:

      - Machine operating mode
      - Safety circuit OK (fence/light curtains etc.)

      Note: *internal* conditions (e.g. communication ok or pendant keyswitch)
      are already handled in the function and do not need to be connected here.
    type: BOOL
    default_value: "0"
    comment: "input: external conditions for executing motion commands"

  - name: bStart
    description: |
      *Used as input*

      A rising edge of this input will *start* the system by enabling the servos.

      This input can be connected to an HMI momentary button and if applicable,
      to a higher level state machine (e.g. machine operating mode).
    type: BOOL
    default_value: "0"
    comment: "input: enable the servos (uses rising edge)"

  - name: bStop
    description: |
      *Used as input*

      A rising edge of this input will *stop/abort* the system.

      This input can be connected to an HMI momentary button and if applicable,
      to a higher level state machine (e.g. machine operating mode).
    type: BOOL
    default_value: "0"
    comment: "input: stop/abort (uses rising edge)"

  - name: bHoldRestart
    description: |
      *Used as input*

      A rising edge of this input will *hold/restart* the system.
      If the robot is moving, a rising edge on this signal will hold the trajectory.
      If the robot is in held state (`bHoldActive = TRUE`), a rising edge will
      resume the trajectory.

      This input can be connected to an HMI momentary button and if applicable,
      to a higher level state machine (e.g. machine operating mode).
    type: BOOL
    default_value: "0"
    comment: "input: hold/restart (uses rising edge)"

  - name: bFlush
    description: |
      *Used as input*

      A rising edge of this input will *stop the motion and flush (clear) the
      motion queue*.
      This is useful to abort the current trajectory in order to immediately
      send new motion commands.

      If applicable, this input can be connected to a higher level state
      machine (e.g. order processing)
    type: BOOL
    default_value: "0"
    comment: "input: stop and flush the motion queue (uses rising edge)"

  - name: bServoOn
    description: |
      *Used as output*

      State machine is in *servo on* state.

      This tells the servos are enabled.
      The system is ready for processing motion commands.

      This output can be used as condition by lower level state machines which
      issue motion commands (e.g. PosTable).

    type: BOOL
    comment: "output: state machine: servo on. Servos are enabled and system is ready for processing motion commands"

  - name: bIdle
    description: |
      *Used as output*

      State machine is in *idle* state.

      The robot controller servos are off.
    type: BOOL
    comment: |
      output: state machine: idle. Robot controller servos are off

  - name: bHoldActive
    description: |
      *Used as output*

      State machine is in *hold* state.

      The robot controller is in Held mode.
      
      The servos are ON and the trajectory is paused.

      The trajectory can be resumed with a rising edge on `bHoldRestart`.
    type: BOOL
    comment: |
      output: state machine: held. Trajectory is suspended

  - name: bError
  - name: nErrorCode

  - name: nSmStartStop
    description: |
      State machine 1: Handling the start/stop sequence.

    type: UINT
    default_value: "0"
    comment: "in/out: state machine 1: start/stop sequence"
    legend:
      "00": idle, not ready for start
      "01": ready for start
      "10": reset system with MLxReset
      "20": enable system with MLxEnable
      "30": system ready for processing motion commands
      "35": hold motion with MLxHold
      "40": system held (restart with start button)
      "45": restart motion with MLxRestart
      "50": stop and flush buffered motions with MLxStop
      "60": finish buffered motions
      "70": abort motion and disable system with MLxAbort
      "99": state machine error

  - name: nSmSpeedOverride
    description: |
      State machine 2: Handling the speed override.

    type: UINT
    default_value: "0"
    comment: "in/out: state machine 2: speed override"
    legend:
      "00": idle
      "10": send speed override with MLxSetGlobalParameter
      "99": state machine error

  - name: fSpeedOverride
    description: |
      *Used as input*

      Setting for *overriding the programmed speed* (range: `0-150%`).

      If a change is detected the internal state machine will send
      the new speed override setting to the robot controller using the
      `MLxSetGlobalParameter` function, with very quick response time.
      The state machine uses an idle time to prevent an overload
      of `MLxSetGlobalParameter` function calls when continuously changing the
      setting.

      The speed override allows to slow down the robot motion
      all the way to standstill, making it an alternative for the `hold`
      function.

      By setting a speed larger than `100%` you can test your cycle at a faster
      speed (capped by the manipulator speed limits).

      This input is typically connected to an HMI element (e.g. input field or
      slider) or a hand wheel.

    type: REAL
    default_value: "100.0"
    comment: "input: for overriding the programmed speed [0 to 150%]"
