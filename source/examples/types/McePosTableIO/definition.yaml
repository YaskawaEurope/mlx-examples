company: Yaskawa Europe GmbH
author: Rioual
comment: IO data for the McePosTable function
changelog:
  - version: 0.3.0
    date: 2024-03-27
    author: Rioual
    added:
      - Input `aInterlockFlags`
      - Output `bWaitFlag`
  - version: 0.2.0
    date: 2024-02-29
    author: Rioual
    added:
      - Input `nAbortingMode`
    changed:
      - Rename `nPosTableMode` to `nMode`
      - Variable type of `nSmPosTable` from `UINT` to `INT`
    removed:
      - Input `bReset`
  - version: 0.1.0-beta
    date: 2024-02-12
    author: Rioual
    added:
      - first version
#   changed:
#   fixed:
#   deprecated:
#   removed:
#   security:
var:
  - name: nRobotNumber
  - name: bSystemReady
  - name: bRun
    description: |
      *Used as input*

      Run the PosTable trajectory.

      In a normal scenario, `bRun` needs to stay `True` until PosTable has
      completed (`bDone`).

      Setting `bRun` to `False` will reset the PosTable:
      - [`nIndex`](#nindex) and [`nLoadIndex`](#nloadindex) are set to `0`
      - [`nCycleNr`](#ncyclenr) is reset
      - [`bError`](#berror) is reset

      If `bRun` is set to `False` while the PosTable hasn't finished yet, 
      it will abort PosTable and then reset.
      The abort behavior is defined by [`nAbortingMode`](#nabortingmode).

    type: BOOL
    comment: "input: run PosTable. Reset PosTable when False"
  - name: bStep
    description: |
      Trigger next step. This is typically required when running PosTable
      step-by-step.

      The user is informed by the [`bWaitForStep`](#bwaitforstep) output.

    type: BOOL
    comment: "input: trigger next step"
  - name: bRecalcQA
    description: |
      *Used as input*

      Manual trigger to recalculate the "queueing amount" (QA).

      A use case is if an **ActionID** was removed while PosTable is running.
      By executing a `RecalcQA` it will prevent a short standstill of the robot at
      the entry where the action was removed.
    type: BOOL
    comment: "input: recalculate QA (queueing amount)"
  - name: nAbortingMode
    description: |
      *Used as input*

      Select how the PosTable will be aborted when [`bRun`](#brun)
      becomes `False` while PosTable was still running.
    type: SINT
    default_value: "0"
    comment: "input: select aborting mode [0=controlled stop, 1=immediate reset of PosTable]"
    legend:
      "0" : |
        Controlled stop until standstill. It gently waits until the already
        buffered motions have finished. This is the prefered way.
      "1" : |
        Immediately reset PosTable. This breaks the active motion commands and
        can result in dangling commands in the MotoLogix command buffer.
        It would require an MLxReset to clean up things afterwards.
  - name: nMode
    description: |
      *Used as input*

      Specifies the PosTable operation mode.

      A PosTable trajectory would normally be executed using motion blending,
      resulting in a fast and smooth trajectory.
      But sometimes (e.g. for testing purposes) you might want to run it without
      blending or even step-by-step.
      That is possible by setting the corresponding mode.

      Changing mode from blending to another mode will first finish the
      already buffered motions before the new mode is visible.
      This effect can be seen as synchronizing `nIndex` to `nLoadIndex`.
    type: SINT
    default_value: "0"
    comment: "input: PosTable operation mode [0=with blending, 1=not blending, 2=single motion (wait for step after each motion)]"
    legend:
      "0" : "With blending (`nLoadIndex` will be ahead of `nIndex`)"
      "1" : "Not blending (`nLoadIndex` = `nIndex`)"
      "2" : "Single motion (wait for step after each motion)"
  - name: nNrOfCycles
    description: |
      *Used as input*

      Specifies number of cycles for the PosTable.

      A PosTable trajectory would normally be executed just once.
      But sometimes you might want to run it a specific number of cycles, or
      even endless.
    type: INT
    default_value: "1"
    comment: "input: for setting the number of cycles for the PosTable [0=repeat forever, 1=single cycle, >1=n cycles]"
    legend:
      "0" : "Repeat forever"
      "1" : "Single cycle"
      ">1" : "`n` cycles"
  - name: aInterlockFlags
    description: |
      *Used as input*

      Set of interlock flags to suspend a trajectory.

      If a PosTable entry has `nInterlock > 0`, then the trajectory is suspended
      as long as the corresponding interlock flag is `True`.
      The trajectory is resumed when the interlock flag turns `False`.

      If the interlock flag is already `False`, the robot does not stop.

      If the interlock flag becomes `True` while the next motions are already
      loaded, the robot does not stop.
    type: ARRAY[0..GVL.NR_OF_INTERLOCK_FLAGS] OF BOOL
    comment: "input: Interlock flags to suspend a trajectory"
  - name: bCustomActionDone
    description: |
      *Used as input*

      If you are using custom actions then this is the handshake signal
      to tell PosTable that your custom action has finished.
      After this signal, PosTable will continue the trajectory.
    type: BOOL
    comment: "input: custom action at standstill done"
  - name: bActionStart
    description: |
      *Used as output*

      State that the robot is in standstill and an `ActionID` is in process.

      If you are using custom actions then this is the trigger to start your action.
    type: BOOL
    comment: "output: start action at standstill"
  - name: nActionID
    description: |
      *Used as output*

      Current ActionID number, used as interface for running custom actions
      which you program yourself outside of `McePosTable`.

    type: INT
    comment: "output: action with standstill [0=none, 1-19=built-in action, >19=custom action]"
    legend:
      "0" : "no active action"
      "1-19" : "active default (built-in) action number"
      ">=20" : "active custom action number"
  - name: nPercentComplete
    description: |
      *Used as output*

      Percentage of the current motion that is completed.
    type: SINT
    comment: "output: Percentage of motion that is completed (for active motion command)"
  - name: nStateTime
    description: |
      *Used as output*

      Elapsed time in current state.

      Value is in `ms`.
    type: DINT
    comment: "output: elapsed time in current state [ms]"
  - name: bIdle
    description: |
      *Used as output*

      State machine is in *idle* state.

      Enable [`bRun`](#brun) to run PosTable.
    type: BOOL
    comment: "output: state machine: idle"
  - name: bBusy
  - name: bWaitForStep
    description: |
      *Used as output*

      System is waiting for a user [`bstep`](#bstep) trigger.
    type: BOOL
    comment: "output: Wait for user bStep trigger"
  - name: aWaitFlag
    description: |
      *Used as output*

      System is waiting for an [`aInterlockFlags`](#ainterlockflags).
    type: ARRAY[0..GVL.NR_OF_INTERLOCK_FLAGS] OF BOOL
    comment: "output: Wait for an interlock flag"
  - name: bDone
    description: |
      *Used as output*

      PosTable has completed the specified number of cycles.

      Stays `True` until PosTable is reset by switching [`bRun`](#brun) to `False`.
    type: BOOL
    comment: "output: PosTable has completed the specified number of cycles"
  - name: bError
  - name: nErrorCode
  - name: nSmPosTable
    description: |
      State machine 1: Run the trajectory of PosTable
    type: INT
    default_value: "0"
    comment: "in/out: state machine 1: PosTable"
    legend:
      "00": idle, not ready for start
      "01": idle, ready for start
      "10-29": handle motion commands
      "30": waiting before performing action at standstill
      "31": perform action at standstill
      "40": cycle completed
      "50": waiting at end of cycle
      "60": reset cycle
      "99": state machine error
  - name: nIndex
    description: |
      PosTable index for current motion.

      State which entry is currently moving the robot.
    type: INT
    comment: "in/out: PosTable index for current motion"
  - name: nLoadIndex
    description: |
      PosTable index of the last loaded motion.

      Useful to track the number of motions loaded in advance.
    type: INT
    comment: "in/out: PosTable index for loading next motion(s)"
  - name: nCycleNr
    description: |
      Number of cycles ran by PosTable.
    type: INT
    comment: "in/out: number of cycles ran by PosTable"