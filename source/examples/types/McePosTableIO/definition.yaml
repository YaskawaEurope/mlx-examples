company: Yaskawa Europe GmbH
author: Rioual
comment: IO data for the McePosTable function
changelog:
  - version: 0.2.0
    date: 2024-02-29
    author: Rioual
    added:
      - Input `nAbortingMode`
    changed:
      - Rename `nPosTableMode` to `nMode`
      - Variable type of `nSmPosTable` from `UINT` to `INT`
    removed:
      - Input `bReset`
  - version: 0.1.0-beta
    date: 2024-02-12
    author: Rioual
    added:
      - first version
#   changed:
#   fixed:
#   deprecated:
#   removed:
#   security:
var:
  - name: nRobotNumber
  - name: bSystemReady
  - name: bRun
    description: |
      *Used as input*

      Run the PosTable trajectory.

      In a normal scenario, `bRun` needs to stay `True` until PosTable has
      completed (`bDone = True`).

      Setting `bRun` to `False` reset the PosTable:
      - [`nIndex`](#nindex) ad [`nLoadIndex`](#nloadindex) are set to `0`
      - [`nCycleNr`](#ncyclenr) is reset
      - [`bError`](#berror) is reset

      If PosTable was running when `bRun` is set to `False`,
      the system will do a **controlled stop**.
      Next motions are not buffered anymore.
      Already buffered motions are run until the robot reach a standstill,
      then the PosTable is reset.
    type: BOOL
    comment: "input: run PosTable. Reset PosTable when False"
  - name: bStep
    description: |
      Run next motion or next ActionID if `nMode = 2`.

      For `nActionID = 2`, PosTable waits for a `bStep` rising edge.
    type: BOOL
    comment: "input: run next motion or next ActionID"
  - name: bRecalcQA
    description: |
      *Used as input*

      Manual trigger to recalculate the "queueing amount" (QA).

      A use case is if an **ActionID** was removed while PosTable is running.
      By executing a `RecalcQA` it will prevent a short standstill of the robot at
      the entry where the action was removed.
    type: BOOL
    comment: "input: recalculate QA (queueing amount)"
  - name: nAbortingMode
    description: |
      *Used as input*

      Select how the PosTable handle a reset of PosTable when [`bRun`](#brun)
      becomes `False`.
    type: SINT
    default_value: "0"
    comment: "input: select aborting mode [0=controlled stop, 1=immediate stop of PosTable processing]"
    legend:
      "0" : "Controlled stop until standstill. Then PosTable is reset."
      "1" : "Immediately stop and reset PosTable. The robot may continue its motion if the controller is still running buffered motion command"
  - name: nMode
    description: |
      *Used as input*

      For selecting the PosTable operation mode.

      A PosTable trajectory would normally be executed using motion blending,
      resulting in a fast and smooth trajectory.
      But sometimes (e.g. for testing purposes) you might want to run it without
      blending or even step-by-step.
      That is possible by setting the corresponding mode.

      **Controlled stop**

      If `nMode` is switched from `0` to `2`, it will do
      a "controlled stop".
      Buffered motions will be finished and the robot will come to a standstill.
      This is a clean way to stop the robot, as it will stop at a defined
      target position rather than just somewhere on path.
      Switching back to `0` will resume the trajectory
    type: SINT
    default_value: "0"
    comment: "input: PosTable operation mode [0=with blending, 1=not blending, 2=single motion (wait for step after each motion)]"
    legend:
      "0" : "With blending"
      "1" : "Not blending"
      "2" : "Single motion (wait for step after each motion)"
  - name: nNrOfCycles
    description: |
      *Used as input*

      Specifies number of cycles for the PosTable.

      A PosTable trajectory would normally be executed just once.
      But sometimes you might want to run it a specific number of cycles, or
      even endless.
    type: INT
    default_value: "1"
    comment: "input: for setting the number of cycles for the PosTable [0=repeat forever, 1=single cycle, >1=n cycles]"
    legend:
      "0" : "Repeat forever"
      "1" : "Single cycle"
      ">1" : "`n` cycles"
  - name: bCustomActionDone
    description: |
      *Used as input*

      If you are using custom actions then this is the handshake signal
      which tells PosTable that the custom action has finished.
      After this signal, the action is completed and PosTable will continue
      the trajectory.
    type: BOOL
    comment: "input: custom action at standstill done"
  - name: bActionStart
    description: |
      *Used as output*

      State that the robot is in standstill and an `ActionID` is in process.

      If you are using custom actions then this is the trigger to start your action.
    type: BOOL
    comment: "output: start action at standstill"
  - name: nActionID
    description: |
      *Used as output*

      Current *nActionID* number, used for custom actions.
    type: INT
    comment: "output: action with standstill [0=none, 1-19=built-in action, >19=custom action]"
    legend:
      "0" : "no active action"
      "1-19" : "active default (built-in) action number"
      ">=20" : "active custom action number"
  - name: nPercentComplete
    description: |
      *Used as output*

      Percentage of the current motion that is completed.
    type: SINT
    comment: "output: Percentage of motion that is completed (for active motion command)"
  - name: nStateTime
    description: |
      *Used as output*

      Elapsed time in current state.

      Value is in `ms`.
    type: DINT
    comment: "output: elapsed time in current state [ms]"
  - name: bIdle
    description: |
      *Used as output*

      State machine is in *idle* state.

      Enable [`bRun`](#brun) to run PosTable.
    type: BOOL
    comment: "output: state machine: idle"
  - name: bBusy
  - name: bWaitForStep
    description: |
      *Used as output*

      System is waiting for a user [`bstep`](#bstep) trigger.
    type: BOOL
    comment: "output: Wait for user bStep trigger"
  - name: bDone
    description: |
      *Used as output*

      PosTable has completed the specified number of cycles.

      Stays `True` until PosTable is reset by switching [`bRun`](#brun) to `False`.
    type: BOOL
    comment: "output: PosTable has completed the specified number of cycles"
  - name: bError
  - name: nErrorCode
  - name: nSmPosTable
    description: |
      State machine 1: Run the trajectory of PosTable
    type: INT
    default_value: "0"
    comment: "in/out: state machine 1: PosTable"
    legend:
      "00": idle, not ready for start
      "01": idle, ready for start
      "10-29": move to pos n / queue pos n+1, n+2 / user frame and tool change included
      "30": waiting before performing action at standstill
      "31": perform action at standstill
      "40": cycle completed
      "50": waiting at end of cycle
      "60": reset cycle
      "99": state machine error
  - name: nIndex
    description: |
      PosTable index for current motion.

      State which entry is currently moving the robot.
    type: INT
    comment: "in/out: PosTable index for current motion"
  - name: nLoadIndex
    description: |
      PosTable index of the last loaded motion.

      Useful to track the number of motions loaded in advance.
    type: INT
    comment: "in/out: PosTable index for loading next motion(s)"
  - name: nCycleNr
    description: |
      Number of cycles ran by PosTable.
    type: INT
    comment: "in/out: number of cycles ran by PosTable"