// -----------------------------------------------------------------------------
// init
// -----------------------------------------------------------------------------
stIO.bError := FALSE;
fbAbort.Enable := FALSE;
fbEnable.Enable := FALSE;
fbHold.Enable := FALSE;
fbReset.Enable := FALSE;
fbRestart.Enable := FALSE;
fbStop.Enable := FALSE;
fbSetGlobalParameter.Enable := FALSE;
fbIdletime.IN := FALSE;


// -----------------------------------------------------------------------------
// common
// -----------------------------------------------------------------------------
// rising edge signals
bOsrStart := stIO.bStart AND NOT aOneShots[0];
aOneShots[0] := stIO.bStart;
bOsrStop := stIO.bStop AND NOT aOneShots[1];
aOneShots[1] := stIO.bStop;
bOsrFlush:= stIO.bFlush AND NOT aOneShots[2];
aOneShots[2] := stIO.bFlush;
bOsrSystemReady:= stIO.bSystemReady AND NOT aOneShots[3];
aOneShots[3] := stIO.bSystemReady;

bAllConditionsOk :=
  stIO.bExternalConditionsOk AND
  stMLX.Signals.MLXGatewayConnected AND
  stMLX.Signals.RemoteMode AND NOT
  stMLX.Signals.EStop1Pressed AND NOT
  stMLX.Signals.EStop2Pressed AND NOT
  stMLX.Signals.EStop3Pressed AND NOT
  stMLX.Signals.GuardCircuitOpen;


// -----------------------------------------------------------------------------
// State machine: system start/stop
// -----------------------------------------------------------------------------
CASE stIO.nSmStartStop OF
  // -------------------------------------
  // idle, not ready for start
  // -------------------------------------
  0:
    IF bAllConditionsOk AND NOT stIO.bStop AND NOT stIO.bFlush THEN
      stIO.nSmStartStop := 1;
    END_IF;

  // -------------------------------------
  // ready for start
  // -------------------------------------
  1:
    IF bAllConditionsOk THEN
      // start
      IF bOsrStart THEN
        stIO.nErrorCode := 0;
        stIO.nSmStartStop := 10;
      END_IF;

      // abort if system still enabled
      // (e.g. caused by pendant operatstIOns in PLAY mode)
      IF (stMLX.SystemState = 3) OR (stMLX.SystemState = 4) THEN
        stIO.nErrorCode := 0;
        stIO.nSmStartStop := 70;
      END_IF;
    END_IF;

    IF NOT bAllConditionsOk OR stIO.bStop OR stIO.bFlush THEN
      stIO.nSmStartStop := 0;
    END_IF;

  // -------------------------------------
  // reset system with MLxReset
  // -------------------------------------
  10:
    fbReset.Enable := TRUE;
    IF fbReset.Sts_EN AND fbReset.Sts_DN THEN
      IF fbReset.Sts_ER THEN
        stIO.nErrorCode := 1000 + stIO.nSmStartStop;
        stIO.nSmStartStop := 70;
      ELSE
        stIO.nSmStartStop := 20;
      END_IF;
    END_IF;

// -------------------------------------
  // enable system with MLxEnable
  // -------------------------------------
  20:
    fbEnable.Enable := TRUE;
    IF fbEnable.Sts_EN AND fbEnable.Sts_DN AND (stMLX.SystemState <> 1)
      AND (stMLX.SystemState <> 2) THEN
      IF fbEnable.Sts_ER THEN
        stIO.nErrorCode := 1000 + stIO.nSmStartStop;
        stIO.nSmStartStop := 70;
      ELSE
        stIO.nSmStartStop := 30;
      END_IF;
    END_IF;

  // -------------------------------------
  // system ready for processing motstIOn commands
  // -------------------------------------
  30:
    // Hold initiated by start button
    IF bOsrStart AND (stMLX.SystemState = 4) THEN
        stIO.nSmStartStop := 35;
    END_IF;

    // Hold initiated by pendant button
    IF (stMLX.SystemState = 6) THEN
        stIO.nSmStartStop := 40;
    END_IF;

    // Flush
    IF bOsrFlush THEN
      stIO.nSmStartStop := 50;
    END_IF;

    IF bOsrStop OR NOT bAllConditionsOk THEN
      stIO.nSmStartStop := 60;
    END_IF;

  // -------------------------------------
  // hold motstIOn with MLxHold
  // -------------------------------------
  35:
    fbHold.Enable := TRUE;
    IF fbHold.Sts_EN AND fbHold.Sts_DN AND (stMLX.SystemState <> 5) THEN
      IF fbHold.Sts_ER THEN
        stIO.nErrorCode := 1000 + stIO.nSmStartStop;
        stIO.nSmStartStop := 70;
      ELSE
        stIO.nSmStartStop := 40;
      END_IF;
    END_IF;

  // -------------------------------------
  // system held (restart with start button)
  // -------------------------------------
  40:
    // Restart initiated by start button
    IF bOsrStart THEN
        stIO.nSmStartStop := 45;
    END_IF;

    // Flush
    IF bOsrFlush THEN
      stIO.nSmStartStop := 50;
    END_IF;

    IF bOsrStop OR NOT bAllConditionsOk THEN
      stIO.nSmStartStop := 60;
    END_IF;

  // -------------------------------------
  // restart motstIOn with MLxRestart
  // -------------------------------------
  45:
    fbRestart.Enable := TRUE;
    IF fbRestart.Sts_EN AND fbRestart.Sts_DN THEN
      IF fbRestart.Sts_ER THEN
        stIO.nErrorCode := 1000 + stIO.nSmStartStop;
        stIO.nSmStartStop := 70;
      ELSE
        stIO.nSmStartStop := 30;
      END_IF;
    END_IF;

  // -------------------------------------
  // stop and flush buffered motstIOns with MLxStop
  // -------------------------------------
  50:
    fbStop.Enable := TRUE;
    IF fbStop.Sts_EN AND fbStop.Sts_DN AND (stMLX.SystemState <> 9)
      AND (stMLX.SystemState <> 10) AND (stMLX.SystemState <> 11) THEN
      IF fbStop.Sts_ER THEN
        stIO.nErrorCode := 1000 + stIO.nSmStartStop;
        stIO.nSmStartStop := 70;
      ELSE
        stIO.nSmStartStop := 45;
      END_IF;
    END_IF;

  // -------------------------------------
  // finish buffered motstIOns
  // (for future)
  // -------------------------------------
  60:
    stIO.nSmStartStop := 70;

  // -------------------------------------
  // abort motstIOn and disable system with MLxAbort
  // -------------------------------------
  70:
    fbAbort.Enable := TRUE;
    IF fbAbort.Sts_EN AND fbAbort.Sts_DN AND (stMLX.SystemState <> 7) THEN
      IF fbAbort.Sts_ER OR (stIO.nErrorCode > 0) THEN
        IF (stIO.nErrorCode = 0) THEN
          stIO.nErrorCode := 1000 + stIO.nSmStartStop;
        END_IF;
        stIO.nSmStartStop := 99;
      ELSE
        stIO.nSmStartStop := 0;
      END_IF;
    END_IF;

  // -------------------------------------
  // state machine error
  // -------------------------------------
  99:
    stIO.bError := TRUE;
    stIO.nSmStartStop := 0;

  ELSE
    stIO.nSmStartStop := 0;

END_CASE;


// -----------------------------------------------------------------------------
// outputs
// -----------------------------------------------------------------------------
stIO.bSystemReady :=
  (stIO.nSmStartStop = 30) OR
  (stIO.nSmStartStop = 35) OR
  (stIO.nSmStartStop = 40) OR
  (stIO.nSmStartStop = 45) OR
  (stIO.nSmStartStop = 60);

// stop indicator
CASE stIO.nSmStartStop OF
  0,
  1:
    stIO.bStopIndicator := TRUE;

  60:
    stIO.bStartIndicator := stBlinkSignals.bSlow;

  70:
    stIO.bStopIndicator := stBlinkSignals.bFast;

  ELSE
    stIO.bStopIndicator := FALSE;

END_CASE;

// start indicator
CASE stIO.nSmStartStop OF
  1:
    stIO.bStartIndicator := stBlinkSignals.bDoubleFlash;

  10,
  20,
  35,
  45,
  50:
    stIO.bStartIndicator := stBlinkSignals.bFast;

  30:
    stIO.bStartIndicator := TRUE;

  40:
    stIO.bStartIndicator := stBlinkSignals.bSlow;

  ELSE
    stIO.bStartIndicator := FALSE;

END_CASE;


// -----------------------------------------------------------------------------
// State machine: speed override
// -----------------------------------------------------------------------------
CASE stIO.nSmSpeedOverride OF
  // -------------------------------------
  // idle
  // -------------------------------------
  0:
    fbIdletime.IN := TRUE;
    IF fbIdletime.Q AND stIO.bSystemReady
      AND (stIO.fSpeedOverride <> fSpeedOverrideStored) THEN
      fSpeedOverrideStored := stIO.fSpeedOverride;
      stIO.nErrorCode := 0;
      stIO.nSmSpeedOverride := 10;
    END_IF;

  // -------------------------------------
  // send speed override
  // -------------------------------------
  10:
    fbSetGlobalParameter.Enable := TRUE;
    IF fbSetGlobalParameter.Sts_EN AND fbSetGlobalParameter.Sts_DN THEN
      IF fbSetGlobalParameter.Sts_ER THEN
        stIO.nErrorCode := 2000 + stIO.nSmSpeedOverride;
        stIO.nSmSpeedOverride := 99;
      ELSE
        stIO.nSmSpeedOverride := 0;
      END_IF;
    END_IF;

  // -------------------------------------
  // state machine error
  // -------------------------------------
  99:
    stIO.bError := TRUE;
    stIO.nSmSpeedOverride := 0;

END_CASE;

// send speed override at every rising edge of system ready
IF bOsrSystemReady THEN
  fSpeedOverrideStored := -1;
END_IF;


// -----------------------------------------------------------------------------
// FB calls
// -----------------------------------------------------------------------------
fbAbort(MLX := stMLX);
fbEnable(MLX := stMLX);
fbHold(MLX := stMLX);
fbReset(MLX := stMLX);
fbRestart(MLX := stMLX);
fbStop(MLX := stMLX);
fbSetGlobalParameter(
  ParameterType := 0,
  ParameterValue := LIMIT(0.0, stIO.fSpeedOverride, 150.0),
  MLX := stMLX);
fbIdletime(PT := T#10MS);