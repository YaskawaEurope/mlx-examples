author: deGroot
changelog:
  - version: 0.2.0
    date: 2022-03-27
    author: Rioual
    added:
      - "[interlockStop](#interlockstop)"
  - version: 0.1.0
    date: 2024-02-11
    author: deGroot
    added:
      - initial release
var:
  MLX:
    description: |
      The MotoLogix variable which acts as the shared memory for a MotoLogix
      system.

      Check the [YaskawaMLx library](/lib) for more information.
    type: MLxData
    comment: MotoLogix shared memory variable

  blinkSignals:
    description: |
      Signals for blinking indicator lights.

      Check the data type for the available blinking patterns.
    type: MceBlinkSignalsIO
    comment: "signals for blinking indicator lights"

  i:
    description: |
      Index for `FOR` loops.
    type: DINT
    comment: index for FOR loops
  k:
    description: |
      Index for `FOR` loops.
    type: DINT
    comment: index for FOR loops

  userFrames:
    description: |
      Collection of user frames for this robot.

      Check the data type for more information.
    type: MceUserFrames
    comment: collection of user frames for this robot

  posTable:
    description: |
      Trajectory to be processed by PosTable.

    type: McePosTableData
    comment: trajectory to be processed by PosTable
  QA:
    description: |
      The *Queueing Amount* is the number of motions allowed to be queued.

      Queueing motion in advance is necessary for smooth motion.
    type: INT
    comment: allowed Queueing Amount; number of motions to queue (for smooth motion)
  nPosTableSize:
    description: |
      Number of entries of the *PosTable*.
    type: INT
    comment: number of entries
  posTableSize:
    description: |
      Number of entries of the *PosTable*.
    type: INT
    comment: number of entries
  index:
    description: |
      Index to start the search from.
    type: INT
    comment: index of actual PosTable entry
  posTableMode:
    description: |
      *PosTable* operation mode.
    type: SINT
    comment: PosTable operation mode [0=with blending, 1=not blending, 2=single motion (wait for step after each motion)]
    legend:
      "0" : "with blending"
      "1" : "not blending"
      "2" : "single motion (wait for step after each motion)"
  bFirstMove:
    description: |
      Must be `True` when calculating the first motion of the *PosTable*.

      `False` otherwise.
    type: BOOL
    comment: calc first move after system was reset
  firstMove:
    description: |
      Must be `True` when calculating the first motion of the *PosTable*.

      `False` otherwise.
    type: BOOL
    comment: calc first move after system was reset
  QA_MAX:
    description: |
      Max Queueing Amount
      
      Max number of motions which can be queued.
    type: INT
    default_value: LIMIT(1, GVL.NR_OF_INSTANCES - 1, 20)
    comment: max Queueing Amount; max number of motions which can be queued
  rollOver:
    description: |
      Continue from the top of the *PosTable* after reaching the end.
    type: BOOL
    comment: continue from start after reaching end of table
  stopAfterLastEntry:
    description: |
      Continue to the start of PosTable when searching for the next Index and LoadIndex if `False`.
    type: BOOL
    comment: continue to the start of PosTable when searching for the next Index and LoadIndex
  allowQueuing:
    description: |
      Allow queuing the next motions.
    type: BOOL
    comment: "allow queuing the next motions"
    legend:
      "0" : "`QA` is decreased at the end of each motion until `0`"
      "1" : "`QA` is updated depending on the number of remaining entries until standstill"
  interlockStop:
    description: |
          Stop the trajectory if the corresponding interlock number is present in `posTable`.

          This array reflect the `aInterlockFlags` from `McePosTable` but an
          `interlockStop` can be `False` if the next motions are already loaded.
          In that case, the trajectory is not stopped.
    type: ARRAY [0..GVL.NR_OF_INTERLOCK_FLAGS] OF BOOL
    comment: interlock stop state. True if the robot can be stopped by interlock