//*******************************************************************************************************************
// detect state change
//*******************************************************************************************************************
IF nState <> stateData.nStateStored THEN
  stateData.nStatePrevious := stateData.nStateStored ;
  bOsrStateChange := TRUE;
  stateData.nStateStored := nState;
ELSE
  bOsrStateChange := FALSE;
END_IF;

//*******************************************************************************************************************
// time state active
//*******************************************************************************************************************
tNow := LTIME(); // system clock in ns resolution

IF (tNow > stateData.tStored) THEN
  nTdiff := LTIME_TO_DINT(tNow - stateData.tStored) / 1000;
  IF (nState <> 0) AND (nTdiff > 0) AND NOT bFreezeTimer THEN
    stateData.nStateTimeUs := stateData.nStateTimeUs + nTdiff;
  END_IF;
END_IF;

stateData.tStored := tNow;
stateData.nStateTime := stateData.nStateTimeUs / 1000;

// store and reset timer at state change
IF bOsrStateChange THEN
  stateData.nStateTimePrevious := stateData.nStateTime;
  stateData.nStateTimeUs := 0;
END_IF;

MceStateMonitoring := stateData.nStateTime;
