IF (index < 0) OR (index > (posTableSize - 1)) THEN
  McePosTableRemainingEntries := 0;
  RETURN;
END_IF;

nCount := - 1;

MEMUtils.MemSet(pbyBuffer := ADR(stConditionResult), byValue := 0, dwSize := SIZEOF(stConditionResult));

nNextLoadIndex := McePosTableFindEntry(loadIndex, 1, posTableSize, rollOver, posTable);
bWaitForConditions := index = nNextLoadIndex;

// -------------------------------------
// forward direction
// -------------------------------------
// search through the remaining part of the array
FOR i := index TO (posTableSize - 1) DO
  IF NOT posTable.stEntry[i].bSkipEntry THEN
    nCount := nCount + 1;

    // check conditions for the next valid position
    nNextIndex := McePosTableFindEntry(i, 1, posTableSize, rollOver, posTable);
    IF nNextIndex >= 0 AND NOT ((index <= nNextIndex AND nNextIndex <= loadIndex) OR (loadIndex < index AND index < nNextIndex AND NOT bWaitForConditions)) THEN
      stConditionResult := McePosTableCheckConditions(
        index := nNextIndex,
        posTableSize := posTableSize,
        conditions := conditions,
        posTable := posTable);
    ELSE
      stConditionResult.bConditionsOk := TRUE;
    END_IF

    // entry with standstill action or next entry with conditions, stop searching
    IF (posTable.stEntry[i].nActionID > 0) OR NOT stConditionResult.bConditionsOk THEN
      McePosTableRemainingEntries := nCount;
      RETURN;

    // last move, ignore further entries
    ELSIF posTable.stEntry[i].bLastEntry THEN
      EXIT;
    END_IF;
  END_IF;
END_FOR;

// search through the first part of the array
IF rollOver THEN
  FOR i := 0 TO index DO
    IF NOT posTable.stEntry[i].bSkipEntry THEN
      nCount := nCount + 1;

      // check conditions for the next valid position
      nNextIndex := McePosTableFindEntry(i, 1, posTableSize, FALSE, posTable);
      IF nNextIndex >= 0 AND NOT ((index <= nNextIndex AND nNextIndex <= loadIndex) OR (loadIndex < index AND index < nNextIndex AND NOT bWaitForConditions)) THEN
        stConditionResult := McePosTableCheckConditions(
          index := nNextIndex,
          posTableSize := posTableSize,
          conditions := conditions,
          posTable := posTable);
      END_IF

      // entry with standstill action or next entry with conditions, stop searching
      IF (posTable.stEntry[i].nActionID > 0) OR NOT stConditionResult.bConditionsOk THEN
        McePosTableRemainingEntries := nCount;
        RETURN;

      // last move, ignore further entries
      ELSIF posTable.stEntry[i].bLastEntry THEN
        EXIT;
      END_IF;
    END_IF;
  END_FOR;
  // unlimited entries to go
  nCount := 9999;
END_IF;

McePosTableRemainingEntries := nCount;
