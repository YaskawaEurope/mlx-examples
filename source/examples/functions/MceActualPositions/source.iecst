// -----------------------------------------------------------------------------
// common
// -----------------------------------------------------------------------------
// check for new position data
bNewPosData :=
  (stMLX.HMIFeedbackData.CurrentRobotTCPCoordFrame = nCoordFrame);

  // -------------------------------------
// lock specific target: frame
  // -------------------------------------
bLockWorld :=
  (stIO.nLockTarget = 10) OR
  (stIO.nLockTarget = 20) OR
  (stIO.nLockTarget = 30) OR
  (stIO.nLockTarget = 40);

bLockUserFrame :=
  (stIO.nLockTarget = 12) OR
  (stIO.nLockTarget = 22) OR
  (stIO.nLockTarget = 32) OR
  (stIO.nLockTarget = 42);


// -----------------------------------------------------------------------------
// State machine 1: read actual TCP positions
// -----------------------------------------------------------------------------
CASE stIO.nSmActualPosition OF
  // -------------------------------------
  // idle
  // -------------------------------------
  0:
    IF stMLX.Signals.MLXGatewayConnected THEN
      stIO.nSmActualPosition := 10;
    ELSE
      nRobotNumber := 0;
      // clear position data
      MEMUtils.MemSet(
        pbyBuffer := ADR(stIO.aPositions),
        byValue := 0,
        dwSize := SIZEOF(stIO.aPositions));

      // clear speed data
      MEMUtils.MemSet(
        pbyBuffer := ADR(stIO.aTcpSpeeds),
        byValue := 0,
        dwSize := SIZEOF(stIO.aTcpSpeeds));
    END_IF;

  // -------------------------------------
  // read TCP position in world
  // -------------------------------------
  10:
    nCoordFrame := 0;

    IF bNewPosData THEN
      // copy World positions
      MEMUtils.MemCpy(
        pbySrc := ADR(stMLX.HMIFeedbackData.CurrentRobotTCPPosition),
        pbyDest := ADR(stIO.aPositions[nRobotNumber].aWorld),
        dwSize := SIZEOF(stIO.aPositions[nRobotNumber].aWorld));

      // copy TCP speed (requires S2C1702=1)
      stIO.aTcpSpeeds[nRobotNumber] :=
        stMLX.HMIFeedbackData.CurrentRobotTCPPosition[7];

      IF NOT bLockWorld THEN
        // prepare next
        nCoordFrame := 2;
        stIO.nSmActualPosition := 20;
      END_IF;
    END_IF;

    IF NOT stMLX.Signals.MLXGatewayConnected THEN
      stIO.nSmActualPosition := 0;
    END_IF;

  // -------------------------------------
  // read TCP position in active user frame
  // -------------------------------------
  20:
    nCoordFrame := 2;

    IF bNewPosData THEN
      // copy user frame positions
      MEMUtils.MemCpy(
        pbySrc := ADR(stMLX.HMIFeedbackData.CurrentRobotTCPPosition),
        pbyDest := ADR(stIO.aPositions[nRobotNumber].aUser),
        dwSize := SIZEOF(stIO.aPositions[nRobotNumber].aUser));

      // copy TCP speed (requires S2C1702=1)
      stIO.aTcpSpeeds[nRobotNumber] :=
        stMLX.HMIFeedbackData.CurrentRobotTCPPosition[7];

      IF NOT bLockUserFrame THEN
        // prepare next
        nCoordFrame := 0;
        nRobotNumber := nRobotNumber + 1;
        stIO.nSmActualPosition := 10;
      END_IF;
    END_IF;

    IF NOT stMLX.Signals.MLXGatewayConnected THEN
      stIO.nSmActualPosition := 0;
    END_IF;

  ELSE
    stIO.nSmActualPosition := 0;
END_CASE;


// -----------------------------------------------------------------------------
// outputs
// -----------------------------------------------------------------------------
stIO.bPosUpdating := (stIO.nSmActualPosition <> 0);

// -------------------------------------
// lock specific target: robot
// -------------------------------------
CASE stIO.nLockTarget OF
  10,
  12:
    nRobotNumber := 0;
  20,
  22:
    nRobotNumber := 1;
  30,
  32:
    nRobotNumber := 2;
  40,
  42:
    nRobotNumber := 3;
END_CASE;

// -------------------------------------
// select feedback position
// -------------------------------------
IF stIO.bUseFeedbackPosition THEN
  nCoordFrame := nCoordFrame + 10;
END_IF;

// -------------------------------------
// set coord frame selection
// -------------------------------------
stMLX.HMIFeedbackConfiguration.CurrentRobotJogCoordFrame := nCoordFrame;

// -------------------------------------
// set robot selection
// -------------------------------------
IF (nRobotNumber < 0) OR (nRobotNumber > (stMLX.NumberOfRobots - 1)) THEN
  nRobotNumber := 0;
END_IF;
stMLX.HMIFeedbackConfiguration.CurrentRobotNumber := nRobotNumber;


// -----------------------------------------------------------------------------
// read all axis positions
// -----------------------------------------------------------------------------
IF stIO.bPosUpdating THEN
  FOR i := 0 TO (stMLX.NumberOfRobots - 1) DO
    FOR k := 0 TO 5 DO
      stIO.aPositions[i].aAxis[k] :=
        stMLX.Robot[i].RobotAxes[k].FeedbackData.CommandedPosition;
    END_FOR;
  END_FOR;
END_IF;