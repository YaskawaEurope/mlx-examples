// -----------------------------------------------------------------------------
// init
// -----------------------------------------------------------------------------
io.bError := FALSE;

fbSelectTool.Enable := FALSE;
fbSetUserFrame.Enable := FALSE;
fbJogAxis.Enable := FALSE;
fbJogTcp.Enable := FALSE;
fbMoveAxisRel.Enable := FALSE;
fbMoveLinRel.Enable := FALSE;
fbIdleTime.IN := FALSE;
fbCoastTime.IN := FALSE;

MEMUtils.MemSet(
  pbyBuffer := ADR(fbJogAxis.Directions),
  byValue := 0,
  dwSize := SIZEOF(fbJogAxis.Directions));

MEMUtils.MemSet(
  pbyBuffer := ADR(fbJogTcp.Directions),
  byValue := 0,
  dwSize := SIZEOF(fbJogTcp.Directions));

MEMUtils.MemSet(
  pbyBuffer := ADR(fbMoveAxisRel.DeltaPosition),
  byValue := 0,
  dwSize := SIZEOF(fbMoveAxisRel.DeltaPosition));

MEMUtils.MemSet(
  pbyBuffer := ADR(fbMoveLinRel.DeltaPosition),
  byValue := 0,
  dwSize := SIZEOF(fbMoveLinRel.DeltaPosition));


// -----------------------------------------------------------------------------
// common
// -----------------------------------------------------------------------------
bOperatingModeManual := (io.nOperatingMode = GVL.OP_MANUAL);

// set jogging mode as default
MLX.JoggingMode := bOperatingModeManual;

// jog speed
io.fSpeed := LIMIT(0.1, io.fSpeed, 100);

// detect changes
bMlxNumberChanged := (io.nMlxNumber <> nMlxNumberSelected);
bRobotNumberChanged := (io.nRobotNumber <> nRobotNumberSelected);
bJogTypeChanged := (io.nJogType <> nJogTypeSelected);
bCoordFrameChanged := (io.nCoordFrame <> nCoordFrameSelected);
bToolChanged := (io.nTool <> nToolSelected);
bUserFrameChanged := (io.nUserFrame <> nUserFrameSelected);

IF bMlxNumberChanged OR
  bRobotNumberChanged OR
  bToolChanged OR
  bUserFrameChanged THEN

  bTcpSettingsNeedUpdate := TRUE;
END_IF;


// -----------------------------------------------------------------------------
// jog buttons to directions pos: 1, neg: -1
// -----------------------------------------------------------------------------
bJogPressed := FALSE;
bRunJog := FALSE;
bUseRotSpeed := FALSE;
FOR i := 0 TO 5 DO
  aDirections[i] := 0;
  IF io.aJogRobotAxisPos[i] OR io.aJogRobotAxisNeg[i] THEN
    bJogPressed := TRUE;
  END_IF;

  IF io.aJogRobotAxisPos[i] AND NOT io.aJogRobotAxisNeg[i] THEN
    aDirections[i] := 1;
    bRunJog := TRUE;
    IF (nJogTypeSelected = JOGTYPE_TCP) AND (i >= 3) THEN // TCP rotation?
      bUseRotSpeed := TRUE;
    END_IF;
  ELSIF NOT io.aJogRobotAxisPos[i] AND io.aJogRobotAxisNeg[i] THEN
    aDirections[i] := -1;
    bRunJog := TRUE;
    IF (nJogTypeSelected = JOGTYPE_TCP) AND (i >= 3) THEN // TCP rotation?
      bUseRotSpeed := TRUE;
    END_IF;
  END_IF;
END_FOR;

//block other axis when rotating the TCP
IF bUseRotSpeed THEN
  aDirections[0] := 0;
  aDirections[1] := 0;
  aDirections[2] := 0;
END_IF;

bOsrRunJog := bRunJog AND NOT aOneShots[0];
aOneShots[0] := bRunJog;


// -----------------------------------------------------------------------------
// state machine 1: manual motion
// -----------------------------------------------------------------------------
CASE io.nSmManualMotion OF
  // -------------------------------------
  // idle, not ready for jog
  // -------------------------------------
  0:
    IF io.bSystemReady AND bOperatingModeManual THEN
      io.nErrorCode := 0;
      bTcpSettingsNeedUpdate := TRUE;
      io.nSmManualMotion := 10;
    END_IF;

  // -------------------------------------
  // ready for jog
  // -------------------------------------
  10:
    nMlxNumberSelected := io.nMlxNumber;
    nRobotNumberSelected := io.nRobotNumber;
    nJogTypeSelected := io.nJogType;
    nCoordFrameSelected := io.nCoordFrame;

    IF bOsrRunJog THEN
      io.nSmManualMotion := 11;
    END_IF;

    IF NOT bOperatingModeManual OR NOT io.bSystemReady THEN
      io.nSmManualMotion := 0;
    END_IF;

  // -------------------------------------
  // jog selection
  // -------------------------------------
  11:
    nMlxNumberSelected := io.nMlxNumber;
    nRobotNumberSelected := io.nRobotNumber;
    nJogTypeSelected := io.nJogType;
    nCoordFrameSelected := io.nCoordFrame;

    IF bRunJog THEN
      // jog axis
      IF (nJogTypeSelected = JOGTYPE_AXIS) THEN
        IF (io.bInchingMode) THEN
          io.nSmManualMotion := 25;
        ELSE
          io.nSmManualMotion := 20;
        END_IF;
      END_IF;

      // jog cartesian
      IF (nJogTypeSelected = JOGTYPE_TCP) THEN
        IF bTcpSettingsNeedUpdate THEN
          io.nSmManualMotion := 15;
        ELSE
          IF (io.bInchingMode) THEN
            io.nSmManualMotion := 35;
          ELSE
            io.nSmManualMotion := 30;
          END_IF;
        END_IF;
      END_IF;
    ELSE
      io.nSmManualMotion := 10;
    END_IF;

    IF NOT io.bSystemReady THEN
      io.nSmManualMotion := 0;
    END_IF;

  // -------------------------------------
  // update TCP settings
  // -------------------------------------
  15:
    IF bUpdateSettingsDone THEN
      IF (io.bInchingMode) THEN
        io.nSmManualMotion := 35;
      ELSE
        io.nSmManualMotion := 30;
      END_IF;
    END_IF;

    IF bRobotNumberChanged OR bMlxNumberChanged THEN
      io.nErrorCode := 1000 + io.nSmManualMotion;
      io.nSmManualMotion := 99;
    END_IF;

    IF NOT io.bSystemReady THEN
      io.nSmManualMotion := 0;
    END_IF;

  // -------------------------------------
  // jog axis with MLxRobotJogAxes
  // -------------------------------------
  20:
    FOR i := 0 TO 5 DO
      fbJogAxis.Directions[i] := aDirections[i];
    END_FOR;
    fbJogAxis.Enable := TRUE;

    IF fbJogAxis.Sts_EN AND fbJogAxis.Sts_DN THEN
      IF NOT io.bSystemReady THEN
        io.nSmManualMotion := 0;
      ELSIF fbJogAxis.Sts_ER OR bRobotNumberChanged THEN
        io.nErrorCode := 1000 + io.nSmManualMotion;
        io.nSmManualMotion := 99;
      ELSE
        io.nSmManualMotion := 21;
      END_IF;
    END_IF;

    IF bMlxNumberChanged THEN
      io.nErrorCode := 1000 + io.nSmManualMotion;
      io.nSmManualMotion := 99;
    END_IF;

  // -------------------------------------
  // jog axis - idle time
  // -------------------------------------
  21:
    fbIdleTime.IN := TRUE;
    fbCoastTime.IN := TRUE;

    IF fbIdletime.Q THEN
      IF NOT bRunJog OR
        NOT bOperatingModeManual OR
        bJogTypeChanged THEN
        io.nSmManualMotion := 22;
      ELSE
        io.nSmManualMotion := 11;
      END_IF;
    END_IF;

    IF NOT io.bSystemReady THEN
      io.nSmManualMotion := 0;
    END_IF;

  // -------------------------------------
  // jog axis - coasting
  // -------------------------------------
  22:
    fbCoastTime.IN := TRUE;
    IF fbCoastTime.Q THEN
      io.nSmManualMotion := 50;
    END_IF;

    IF NOT io.bSystemReady THEN
      io.nSmManualMotion := 0;
    END_IF;

  // -------------------------------------
  // inch axis with MLxRobotMoveAxisRelative
  // -------------------------------------
  25:
    FOR i := 0 TO 5 DO
      fbMoveAxisRel.DeltaPosition[i] :=
        (INCHING_DIST_AXIS * SINT_TO_REAL(aDirections[i]));
    END_FOR;

    MLX.JoggingMode := FALSE;
    fbMoveAxisRel.Enable := TRUE;

    IF fbMoveAxisRel.Sts_EN AND fbMoveAxisRel.Sts_DN THEN
      IF NOT io.bSystemReady THEN
        io.nSmManualMotion := 0;
      ELSIF fbMoveAxisRel.Sts_ER OR bRobotNumberChanged THEN
        io.nErrorCode := 1000 + io.nSmManualMotion;
        io.nSmManualMotion := 99;
      ELSIF fbMoveAxisRel.Sts_PC THEN
        io.nSmManualMotion := 50;
      END_IF;
    END_IF;

    IF bMlxNumberChanged THEN
      io.nErrorCode := 1000 + io.nSmManualMotion;
      io.nSmManualMotion := 99;
    END_IF;

  // -------------------------------------
  // jog TCP with MLxRobotJogTCP
  // -------------------------------------
  30:
    FOR i := 0 TO 5 DO
      fbJogTcp.Directions[i] := aDirections[i];
    END_FOR;
    fbJogTcp.Enable := TRUE;

    IF fbJogTcp.Sts_EN AND fbJogTcp.Sts_DN THEN
      IF NOT io.bSystemReady THEN
        io.nSmManualMotion := 0;
      ELSIF fbJogTcp.Sts_ER OR bRobotNumberChanged THEN
        io.nErrorCode := 1000 + io.nSmManualMotion;
        io.nSmManualMotion := 99;
      ELSE
        io.nSmManualMotion := 31;
      END_IF;
    END_IF;

    IF bMlxNumberChanged THEN
      io.nErrorCode := 1000 + io.nSmManualMotion;
      io.nSmManualMotion := 99;
    END_IF;

  // -------------------------------------
  // jog TCP - idle time
  // -------------------------------------
  31:
    fbIdleTime.IN := TRUE;
    fbCoastTime.IN := TRUE;

    IF fbIdletime.Q THEN
      IF NOT bRunJog OR
        NOT bOperatingModeManual OR
        bJogTypeChanged OR
        bCoordFrameChanged OR
        bToolChanged THEN
        io.nSmManualMotion := 32;
      ELSE
        io.nSmManualMotion := 11;
      END_IF;
    END_IF;

    IF NOT io.bSystemReady THEN
      io.nSmManualMotion := 0;
    END_IF;

  // -------------------------------------
  // jog TCP - coasting
  // -------------------------------------
  32:
    fbCoastTime.IN := TRUE;
    IF fbCoastTime.Q THEN
      io.nSmManualMotion := 50;
    END_IF;

    IF NOT io.bSystemReady THEN
      io.nSmManualMotion := 0;
    END_IF;

  // -------------------------------------
  // inch TCP with MLxRobotMoveLinearRelative
  // -------------------------------------
  35:
    FOR i := 0 TO 5 DO
      fbMoveLinRel.DeltaPosition.TCPPosition[i] :=
        (INCHING_DIST_TCP * SINT_TO_REAL(aDirections[i]));
    END_FOR;

    MLX.JoggingMode := FALSE;
    fbMoveLinRel.Enable := TRUE;

    IF fbMoveLinRel.Sts_EN AND fbMoveLinRel.Sts_DN THEN
      IF NOT io.bSystemReady THEN
        io.nSmManualMotion := 0;
      ELSIF fbMoveLinRel.Sts_ER OR bRobotNumberChanged THEN
        io.nErrorCode := 1000 + io.nSmManualMotion;
        io.nSmManualMotion := 99;
      ELSIF fbMoveLinRel.Sts_PC THEN
        io.nSmManualMotion := 50;
      END_IF;
    END_IF;

    IF bMlxNumberChanged THEN
      io.nErrorCode := 1000 + io.nSmManualMotion;
      io.nSmManualMotion := 99;
    END_IF;

  // -------------------------------------
  // done
  // -------------------------------------
  50:
    IF NOT bJogPressed THEN
      IF io.bSystemReady AND bOperatingModeManual THEN
        io.nSmManualMotion := 10;
      ELSE
        io.nSmManualMotion := 0;
      END_IF;
    END_IF;

    IF NOT io.bSystemReady THEN
      io.nSmManualMotion := 0;
    END_IF;

  // -------------------------------------
  // state machine error
  // -------------------------------------
  99:
    io.bError := TRUE;
    IF NOT bRunJog THEN
      io.nSmManualMotion := 0;
    END_IF;

  ELSE
    io.nSmManualMotion := 0;
END_CASE;


// -----------------------------------------------------------------------------
// reset
// -----------------------------------------------------------------------------
IF NOT MLX.Signals.MLXGatewayConnected THEN
  io.nSmManualMotion := 0;
END_IF;


// -----------------------------------------------------------------------------
// outputs
// -----------------------------------------------------------------------------
io.bIdle := (io.nSmManualMotion = 0) OR (io.nSmManualMotion = 10);
bUpdateSettings := (io.nSmManualMotion = 15);
io.bDone := (io.nSmManualMotion = 50);
io.bBusy := (io.nSmManualMotion > 10) AND (io.nSmManualMotion < 50);
io.bCoasting := (io.nSmManualMotion = 22) OR (io.nSmManualMotion = 32) ;

FOR i := 0 TO 5 DO
  IF io.bBusy THEN
    io.aJogRobotAxisNegIndicator[i] := io.aJogRobotAxisNeg[i];
    io.aJogRobotAxisPosIndicator[i] := io.aJogRobotAxisPos[i];
  END_IF;

  IF NOT io.bBusy AND NOT io.bCoasting THEN
    io.aJogRobotAxisNegIndicator[i] := FALSE;
    io.aJogRobotAxisPosIndicator[i] := FALSE;
  END_IF;
END_FOR;


// -----------------------------------------------------------------------------
// state machine 2: settings
// -----------------------------------------------------------------------------
CASE io.nSmSettings OF
  // -------------------------------------
  // idle
  // -------------------------------------
  0:
    IF bUpdateSettings OR
       (bTcpSettingsNeedUpdate AND io.bSystemReady AND bOperatingModeManual AND io.bIdle) THEN
      io.nErrorCode := 0;
      io.nSmSettings := 10;
    END_IF;

  // -------------------------------------
  // select tool
  // -------------------------------------
  10:
    // init
    MEMUtils.MemSet(
    pbyBuffer := ADR(fbSelectTool.ToolData),
    byValue := 0,
    dwSize := SIZEOF(fbSelectTool.ToolData));

    fbSelectTool.RobotNumber := io.nRobotNumber;
    fbSelectTool.ToolNumber := io.nTool;
    fbSelectTool.Enable := TRUE;
    IF fbSelectTool.Sts_EN AND fbSelectTool.Sts_DN THEN
      IF NOT io.bSystemReady THEN
        io.nSmSettings := 0;
      ELSIF fbSelectTool.Sts_ER THEN
        io.nErrorCode := 2000 + io.nSmSettings;
        io.nSmSettings := 99;
      ELSE
        nToolSelected := io.nTool;
        io.nSmSettings := 20;
      END_IF;
    END_IF;

  // -------------------------------------
  // set user frame
  // -------------------------------------
  20:
    // init
    MEMUtils.MemSet(
    pbyBuffer := ADR(fbSetUserFrame.UserFrameData),
    byValue := 0,
    dwSize := SIZEOF(fbSetUserFrame.UserFrameData));

    fbSetUserFrame.UserFrameData.CoordFrame :=
      userFrames.aFrames[io.nUserFrame].aVector;

    fbSetUserFrame.RobotNumber := io.nRobotNumber;
    fbSetUserFrame.UserFrameNumber := io.nUserFrame;
    fbSetUserFrame.Enable := TRUE;

    IF fbSetUserFrame.Sts_EN AND fbSetUserFrame.Sts_DN THEN
      IF NOT io.bSystemReady THEN
        io.nSmSettings := 0;
      ELSIF fbSetUserFrame.Sts_ER THEN
        io.nErrorCode := 2000 + io.nSmSettings;
        io.nSmSettings := 99;
      ELSE
        nUserFrameSelected := io.nUserFrame;
        io.nSmSettings := 30;
      END_IF;
    END_IF;

  // -------------------------------------
  // zero-distance motion with MLxRobotMoveAxisRelative (updates actual position)
  // -------------------------------------
  30:
    // init
    MEMUtils.MemSet(
    pbyBuffer := ADR(fbMoveAxisRel.DeltaPosition),
    byValue := 0,
    dwSize := SIZEOF(fbMoveAxisRel.DeltaPosition));

    MLX.JoggingMode := FALSE;
    fbMoveAxisRel.Enable := TRUE;

    IF fbMoveAxisRel.Sts_EN AND fbMoveAxisRel.Sts_DN THEN
      IF NOT io.bSystemReady THEN
        io.nSmSettings := 0;
      ELSIF fbMoveAxisRel.Sts_ER THEN
        io.nErrorCode := 2000 + io.nSmSettings;
        io.nSmSettings := 99;
      ELSIF fbMoveAxisRel.Sts_PC THEN
        nUserFrameSelected := io.nUserFrame;
        io.nSmSettings := 50;
      END_IF;
    END_IF;

  // -------------------------------------
  // done
  // -------------------------------------
  50:
    bTcpSettingsNeedUpdate := FALSE;
    IF NOT bUpdateSettings OR NOT io.bSystemReady THEN
      io.nSmSettings := 0;
    END_IF;

  // -------------------------------------
  // state machine error
  // -------------------------------------
  99:
    io.bError := TRUE;
    io.nSmSettings := 0;

  ELSE
    io.nSmSettings := 0;
END_CASE;


// -----------------------------------------------------------------------------
// reset
// -----------------------------------------------------------------------------
IF NOT MLX.Signals.MLXGatewayConnected THEN
  io.nSmSettings := 0;
END_IF;


// -----------------------------------------------------------------------------
// outputs
// -----------------------------------------------------------------------------
bUpdateSettingsDone := (io.nSmSettings = 50);


// -----------------------------------------------------------------------------
// FB calls
// -----------------------------------------------------------------------------
fbIdleTime(PT:=io.tIdleTime);
fbCoastTime(PT:=io.tCoastTime);
fbSelectTool( MLX := MLX );
fbSetUserFrame( MLX := MLX );

fbJogAxis(
  RobotNumber := nRobotNumberSelected,
  Speed := io.fSpeed,
  MLX:= MLX);

fbJogTcp(
  RobotNumber := nRobotNumberSelected,
  Speed := io.fSpeed,
  UseRotationalSpeed := bUseRotSpeed,
  SpeedUnits := 0,
  CoordFrame := nCoordFrameSelected,
  MLX := MLX);

fbMoveAxisRel(
  RobotNumber := nRobotNumberSelected,
  BlendFactor := INCHING_BF,
  BlendType := 0,
  Speed := INCHING_SPEED,
  Acceleration := INCHING_ACC_DEC,
  Deceleration := INCHING_ACC_DEC,
  MLX := MLX );

fbMoveLinRel(
  RobotNumber := nRobotNumberSelected,
  BlendFactor := INCHING_BF,
  BlendType := 0,
  Speed := INCHING_SPEED,
  UseRotationalSpeed := bUseRotSpeed,
  SpeedUnits := 0,
  Acceleration := INCHING_ACC_DEC,
  Deceleration := INCHING_ACC_DEC,
  CoordFrame := nCoordFrameSelected,
  MLX := MLX);
